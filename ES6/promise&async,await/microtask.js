/** 마이크로태스크
 * 프로미스 핸들러 .then/catch/finally는 항상 비동기적으로 실행된다.
 * 프라미스가 즉시 이행되더라도 .then/catch/finally 아래에 있는 코드는 이 핸들러들이 실행되기 전에 실행된다.
 */
// 예시
let promise = Promise.resolve();

promise.then(() => alert("프라미스 성공!"));

alert("코드 종료"); // 얼럿 창이 가장 먼저 뜬다.

/* 예시를 실행하면 '코드 종료'가 먼저, '프라미스 성공!'이 나중에 출력되는 것을 볼 수 있다.
 * 하지만 프라마스는 즉시 이행되었는데 말이다.
 * 왜 .then이 나중에 트리거 되었는지 알아보자.
 */

/** 마이크로태스크 큐
 * 비동기 작업을 처리하려면 적절한 관리가 필요하다.
 * 이를 위해 ECMA에선 PromiseJobs라는 내부 큐(internal queue)를 명시한다.
 * V8 엔진에선 이를 '마이크로태스크 큐(microtask queue)'라고 부르기 때문에 이 용어가 좀 더 선호된다.
 * 
 * 명세서의 설명을 살펴보자
    * 마이크로태스크 큐는 먼저 들어온 작업을 먼저 실행한다(FIFO, first-in-first-out).
    * 실행할 것이 아무것도 남아있지 않을 때만 마이크로태스크 큐에 있는 작업이 실행되기 시작한다.
 * 
 * 요약하자면, 어떤 프라미스가 준비되었을 때 이 프라미스의 .then/catch/finally 핸들러가 큐에 들어간다고 생각하면 된다.
 * 이때 핸들러들은 여전히 실행되지 않는다. 현재 코드에서 자유로운 상태가 되었을 때에서야 자바스크립트 엔진은 큐에서 작업을 꺼내 실행한다.
 * 위 예시에서 '코드 종료'가 먼저 출력되는 이유가 여기에 있다.
 * 
 * 프라미스 핸들러가 항상 내부 큐를 통과하게 된다.
 * 여러 개의 .then/catch/finally를 사용해 만든 체인의 경우, 각 핸들러는 비동기적으로 실행된다.
 * 큐에 들어간 핸들러 각각은 현재 코드가 완료되고, 큐에 적체된 이전 핸들러의 실행이 완료되었을 때 실행된다.
 * 
 * 그렇다면 '프라미스 성공!'을 먼저, '코드 종료'를 나중에 출력되게 하려면 어떻게 해야 할까?
 * 실행 순서가 중요한 경우엔 이런 요구사항이 충족되도록 코드를 작성해야 한다.
 * 
 * 방법은 아주 쉽다. .then을 사용해 큐에 넣으면 된다.
 */
Promise.resolve()
    .then(() => alert("프라미스 성공"))
    .then(() => alert("코드 종료"));
/* 이제 의도한 대로 순서가 변경되었다. */

////////////////////////////////////

/**
 * 
 * 
 */