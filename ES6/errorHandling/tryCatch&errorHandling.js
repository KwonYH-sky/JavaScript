/** 'try..catch'와 에러 핸들링
 * 아무리 프로그래밍이 능한 사람이더라도 에러가 있는 스크립트를 작성할 수 있다.
 * 원인은 아마도 실수, 예상치 못한 사용자 입력, 잘못된 서버 응답 등의 수천만 가지 이유 때문일 것이다.
 * 
 * 에러가 발생하면 스크립트는 '죽고'(즉시 중단되고), 콘솔에 에러가 출력된다.
 * 그러나 try..catch 문법을 사용하면 스크립트가 죽는 걸 방지하고, 에러를 '잡아서(catch)' 더 합당한 무언가를 할 수 있게 된다.
 */

/** 'try..catch' 문법
 * 'try..catch' 문법은 'try'와 'catch'라는 두 개의 주요 블록으로 구성된다.

try {

    // 코드...

} catch (err) {

    // 에러 핸들링

}

 * try..catch 동작 알고리즘은 다음과 같다
    * 1. 먼저, try {...} 안의 코드가 실행된다.
    * 2. 에러가 없다면, try 안의 마지막 줄까지 실행되고, catch 블록은 건너뛴다.
    * 3. 에러가 있다면, try 안 코드의 실행이 중단되고, catch(err) 블록으로 제어 흐름이 넘어간다.
        변수 err(아무 이름이나 사용가능)는 무슨 일이 일어났는지에 대한 설명이 담긴 에러 객체를 포함한다.
 * 이렇게 try {...} 블록 안에서 에러가 발생해도 catch에서 에러를 처리하기 때문에 스크립트는 죽지 않는다.
 */

/* 에러가 없는 예시: (1)과 (2)를 alert 창에 보여줌 */
try {
    
    alert('try 블록 시작'); // (1) <--

    // ...에러가 없습니다.

    alert('try 블록 끝'); // (2) <--

} catch (err) {
    
    alert('에러가 없으므로, catch는 무시됩니다.'); // (3)

}

/* 에러가 있는 예시: (1)과 (3)을 보여줌 */
try {

    alert('try 블록 시작'); // (1) <--

    lalala; // 에러, 변수가 정의되지 않음!

    alert('try 블록 끝(절대 도달하지 않음)'); // (2)

} catch (err) {
    
    alert('에러가 발생했습니다!'); // (3) <--

}

/** 에러 객체
 * 에러가 발생하면 자바스크립트는 에러 상세내용이 담긴 객체를 생성한다. 그 후, catch 블록에 이 객체를 인수로 전달한다.
try {
    // ...
} catch(err) { // <-- '에러 객체', err 대신 다른 이름으로도 쓸 수 있음
    // ...
}
 * 내장 에러 전체와 에러 객체는 두 가지 주요 프로퍼티를 가진다.
    * name
    에러 이름. 정의되지 않는 변수 때문에 발생한 에러라면 "ReferenceError"가 이름이 된다.
    * message
    에러 상세 내용을 담고 있는 문자 메시지
    * stack
    현재 호출 스택. 에러를 유발한 중첩 호출들의 순서 정보를 가진 문자열로 디버깅 목적으로 사용된다.
 * 
 */

/* 예시: */
try {
    lalala; // 에러, 변수가 정의되지 않음!
} catch (err) {
    alert(err.name); // ReferenceError
    alert(err.message); // lalala is not defined
    alert(err.stack); // ReferenceError: lalala is not defined at ... (호출 스택)

    // 에러 전체를 보여줄 수도 있다.
    // 이때, 에러 객체는 "name: message" 형태의 문자열로 변환된다.
    alert(err); // ReferenceError: lalala is not defined
}

/** 선택적 'catch' 바인딩 (최근에 추가됨 -> 구식 브라우저는 폴리필이 필요)
 * 에러에 대한 자세한 정보가 필요하지 않으면, catch에서 이를 생략할 수 있다.
try {
    // ...
} catch  {
    // ...
}
 */

///////////////////////////////////////////////////////////////////////////

/** 'try..catch' 사용하기
 * 'try..catch'가 실무에서 어떻게 사용되는지 알아보자.
 * JSON.parse(str) 메서드는 주로 서버 등에서 네트워크를 통해 전달받은 데이터를 디코딩하는 데 사용한다.
 * 전달받는 데이터에 JSON.parse를 호출하는 식으로 사용된다.
 */

