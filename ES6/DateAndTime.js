/** Date 객체와 날짜
 * 날짜를 저장할 수 있고, 날짜와 관련된 메서드도 제공해주는 내장 객체 Date를 알아보자.
 * Date 객체를 활용하면 생성 및 수정 시간을 저장하거나 
 * 시간을 측정할 수 있고, 현재 날짜를 출력하는 용도 등으로도 활용 할 수 있다.
 */

/** 객체 생성하기
 * new Date()를 호출하면 새로운 Date 객체가 만들어지는데, new Date()는 다음과 같은 형태로 호출할 수 있다.
 * `new Date()`
 * 인수 없이 호출하면 현재 날짜와 시간이 저장된 Date 객체가 반환된다.
 */

let now = new Date();
alert(now); // 현재 날짜 및 시간이 출력됨

/* new Date(milliseconds)
 * UTC 기준(UTC+0) 1970년 1월 1일 0시 0분 0초에서 milliseconds 밀리초(1/1000초)후의 시점이 저장된 Date 객체가 반환된다.
 */

// 1970년 1월 1일 0시 0분 0초(UTC+0)를 나타내는 객체
let Jan01_1970 = new Date(0);
alert(Jan01_1970);

// 1970년 1월 1일의 24시간 후는 1970년 1월 2일(UTC+0)임 
let Jan02_1970 = new Date(24 * 3600 * 1000);
alert(Jan02_1970);

/* 1970년의 첫날을 기준으로 흘러간 밀리초를 나타내는 정수는 타임스탬프(timestamp)라고 부른다.
 * 타임스탬프를 사용하면 날짜를 숫자 형태로 간편하게 나타낼 수 있다.
 * `new Date(timestamp)`를 사용하여 타임스탬프를 사용해 특정 날짜가 저장된 Date 객체를 손쉽게 만들수 있고, 
 * date.getTime() 메서드를 사용해 Date 객체에서 타임스탬프를 추출하는 것도 가능하다.
 * 
 * 1970년 1월 1일 이전 날짜에 해당하는 타임스탬프 값은 음수이다.
 */

// 예시:
// 31 Dec 1969
let Dec31_1969 = new Date(-24 * 3600 * 1000);
alert(Dec31_1969);

/* `new Date(datestring)`
 * 인수가 하나인데, 문자열이라면 해당 문자열은 자동으로 구문 분석(parsed)된다.
 * 구문 분석에 적용되는 알고리즘은 `Date.parse`에서 사용하는 알고리즘과 동일하다.
 */

let date = new Date("2017-01-26");
alert(date);
// 인수로 시간을 지정하지 않았기 때문에 GMT 자정이라고 가정하고
// 코드가 실행되는 시간대(timezone)에 따라 출력 문자열이 바뀐다.
// 따라서 얼럿 창엔
// Thu Jan 26 2017 11:00:00 GMT+1100 (Australian Eastern Daylight Time)
// 혹은
// Wed Jan 25 2017 16:00:00 GMT-0800 (Pacific Standard Time)등이 출력된다.

/* `new Date(year, month, date, hours, minutes, seconds, ms)`
 * 주어진 인수를 조합해 만들 수 있는 날짜가 저장도니 객체가 반환된다(지역 시간대 기준). 
 * 첫 번째와 두 번째 인수만 필수 값이다.
    * year는 반드시 네 자리 숫자여야한다. 2013은 괜찮고 98은 괜찮지 않다.
    * month는 0(1월)부터 11(12월) 사이의 숫자여야 한다.
    * date는 일을 나타내는데, 값이 없는 경우 1일로 처리된다.
    * hours/minutes/ms에 값이 없는 경우엔 0으로 처리된다.
 */

// 예시:
new Date(2011, 0, 1, 0, 0, 0, 0); // 2011년 1월 1일, 00시 00분 00초
new Date(2013, 0, 1); // hours를 비롯한 인수는 기본값이 0이므로 위와 동일

/* 최소 정밀도는 1밀리초(1/1000초)이다. */

date = new Date(2011, 0, 1, 2, 3, 4, 567);
alert(date); // 2011년 1월 1일, 02시 03분 04.567초

/////////////////////////////////////////////////////////////////////
